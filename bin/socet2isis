#!/usr/bin/env python
import argparse
import os
import sys
import warnings
import csv
import numpy as np

from plio.examples import get_path
from plio.io.io_bae import read_atf, read_gpf, read_ipf
from plio.spatial.transformations import *
import plio.io.io_controlnetwork as cn

import pandas as pd

def parse_args():
    parser = argparse.ArgumentParser()

    # Add args here
    parser.add_argument('at_file', help='Path to the .atf file for a project.')
    parser.add_argument('cub_file_path', help='Path to cube files related to ipf files.')
    parser.add_argument('cub_ipf_map', help='Path to map file for all ipfs and cubes.')
    parser.add_argument('--outpath', help='Directory for the control network to be output to.',
                                        required = False)

    return parser.parse_args()


def main(args):
    # Setup the at_file, path to cubes, and control network out path
    at_file = args.at_file
    cnet_out = os.path.split(os.path.splitext(at_file)[0])[1]
    cub_path = args.cub_file_path

    if(args.outpath):
        outpath = args.outpath
    else:
        outpath = os.path.split(at_file)[0]

    with open(args.cub_ipf_map) as cub_ipf_map:
        reader = csv.reader(cub_ipf_map, delimiter = ',')
        image_dict = dict([(row[0], row[1]) for row in reader])

    # Read in and setup the atf dict of information
    atf_dict = read_atf(at_file)

    # Get the gpf and ipf files using atf dict
    gpf_file = os.path.join(atf_dict['PATH'], atf_dict['GP_FILE']);
    ipf_list = [os.path.join(atf_dict['PATH'], i) for i in atf_dict['IMAGE_IPF']]

    # Read in the gpf file and ipf file(s) into seperate dataframes
    gpf_df = read_gpf(gpf_file)
    ipf_df = read_ipf(ipf_list)

    # Check for differences between point ids using each dataframes
    # point ids as a reference
    gpf_pt_idx = pd.Index(pd.unique(gpf_df['point_id']))
    ipf_pt_idx = pd.Index(pd.unique(ipf_df['pt_id']))

    point_diff = ipf_pt_idx.difference(gpf_pt_idx)

    if len(point_diff) != 0:
        warnings.warn("The following points found in ipf files missing from gpf file: " +
        "\n\n{}\n\n".format("\n".join(point_diff)) +
        "Continuing, but these points will be missing from the control " +
        "network.", stacklevel=3)

    # Merge the two dataframes on their point id columns
    socet_df = ipf_df.merge(gpf_df, left_on='pt_id', right_on='point_id')

    # Apply the transformations
    apply_transformations(atf_dict, socet_df)

    # Define column remap for socet dataframe
    column_remap = {'l.': 'y', 's.': 'x',
                    'res_l': 'LineResidual', 'res_s': 'SampleResidual', 'known': 'Type',
                    'lat_Y_North': 'AprioriY', 'long_X_East': 'AprioriX', 'ht': 'AprioriZ',
                    'sig0': 'AprioriLatitudeSigma', 'sig1': 'AprioriLongitudeSigma',
                    'sig2': 'AprioriRadiusSigma'}

    # Rename the columns using the column remap above
    socet_df.rename(columns = column_remap, inplace=True)

    images = pd.unique(socet_df['ipf_file'])

    serial_dict = serial_numbers(image_dict, cub_path)

    # creates the control network
    cn.to_isis(os.path.join(outpath, cnet_out + '.net'), socet_df, serial_dict)

if __name__ == '__main__':
    main(parse_args())
